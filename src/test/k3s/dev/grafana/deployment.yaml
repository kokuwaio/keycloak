apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: /metrics
    spec:
      initContainers:
        - name: postgresql
          image: ${image.postgresql}
          imagePullPolicy: Never
          command: [sh, -c, until psql; do sleep 2; done]
          env:
            - name: PGHOST
              valueFrom:
                configMapKeyRef:
                  name: grafana-config
                  key: GF_DATABASE_HOST
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: GF_DATABASE_USER
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: GF_DATABASE_PASSWORD
          securityContext:
            runAsUser: 10001
            runAsGroup: 10001
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            privileged: false
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ALL]
      containers:
        - name: grafana
          image: ${image.grafana}
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: grafana-config
            - secretRef:
                name: grafana-secrets
          ports:
            - name: http
              containerPort: 8080
          startupProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 1
            successThreshold: 1
            failureThreshold: 55
          volumeMounts:
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: true
            - name: dashboards
              mountPath: /etc/grafana/provisioning/dashboards
              readOnly: true
            - name: tmp
              mountPath: /tmp/grafana
          securityContext:
            runAsUser: 10001
            runAsGroup: 10001
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            privileged: false
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ALL]
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 5
      volumes:
        - name: datasources
          configMap:
            name: grafana-datasources
        - name: dashboards
          configMap:
            name: grafana-dashboards
        - name: tmp
          emptyDir: {}
